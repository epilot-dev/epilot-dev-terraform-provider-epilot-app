// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"github.com/epilot-dev/terraform-provider-epilot-app/internal/sdk/internal/utils"
)

// ConfigOptions - Metadata for the app components
type ConfigOptions struct {
	// Type of app component
	ComponentType *ComponentType           `json:"component_type,omitempty"`
	Configuration []ComponentConfiguration `json:"configuration,omitempty"`
}

func (o *ConfigOptions) GetComponentType() *ComponentType {
	if o == nil {
		return nil
	}
	return o.ComponentType
}

func (o *ConfigOptions) GetConfiguration() []ComponentConfiguration {
	if o == nil {
		return nil
	}
	return o.Configuration
}

// App - Information about the installed app
type App struct {
	// Unique identifier for the app configuration
	AppID *string `json:"app_id,omitempty"`
	// Metadata for the app components
	ConfigOptions *ConfigOptions `json:"config_options,omitempty"`
	// Flag to indicate if the app is enabled.
	Enabled *bool `default:"true" json:"enabled"`
	// Unique identifier for the app installation
	InstallationID *string `json:"installation_id,omitempty"`
	// Timestamp of app creation
	InstalledAt *string `json:"installed_at,omitempty"`
	// User ID of the user who installed the app
	InstalledBy *string `json:"installed_by,omitempty"`
	// Unique identifier for the organization the app is installed in
	OrganizationID *string `json:"organization_id,omitempty"`
}

func (a App) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *App) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *App) GetAppID() *string {
	if o == nil {
		return nil
	}
	return o.AppID
}

func (o *App) GetConfigOptions() *ConfigOptions {
	if o == nil {
		return nil
	}
	return o.ConfigOptions
}

func (o *App) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *App) GetInstallationID() *string {
	if o == nil {
		return nil
	}
	return o.InstallationID
}

func (o *App) GetInstalledAt() *string {
	if o == nil {
		return nil
	}
	return o.InstalledAt
}

func (o *App) GetInstalledBy() *string {
	if o == nil {
		return nil
	}
	return o.InstalledBy
}

func (o *App) GetOrganizationID() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationID
}

// AppInput - Information about the installed app
type AppInput struct {
	// Metadata for the app components
	ConfigOptions *ConfigOptions `json:"config_options,omitempty"`
	// Flag to indicate if the app is enabled.
	Enabled *bool `default:"true" json:"enabled"`
}

func (a AppInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AppInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AppInput) GetConfigOptions() *ConfigOptions {
	if o == nil {
		return nil
	}
	return o.ConfigOptions
}

func (o *AppInput) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}
