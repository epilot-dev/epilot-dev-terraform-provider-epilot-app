// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type Type string

const (
	TypeString  Type = "string"
	TypeNumber  Type = "number"
	TypeBoolean Type = "boolean"
	TypeSecret  Type = "secret"
)

func (e Type) ToPointer() *Type {
	return &e
}
func (e *Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "string":
		fallthrough
	case "number":
		fallthrough
	case "boolean":
		fallthrough
	case "secret":
		*e = Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Type: %v", v)
	}
}

// ComponentConfiguration - Metadata for the component
type ComponentConfiguration struct {
	Key   *string `json:"key,omitempty"`
	Type  *Type   `json:"type,omitempty"`
	Value *string `json:"value,omitempty"`
}

func (o *ComponentConfiguration) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *ComponentConfiguration) GetType() *Type {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *ComponentConfiguration) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}
